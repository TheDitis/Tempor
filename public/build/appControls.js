
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_store, a as component_subscribe, f as validate_slots, b as start, e as duration, j as element, t as text, h as space, l as add_location, m as insert_dev, n as append_dev, B as listen_dev, o as set_data_dev, p as noop, q as detach_dev } from './stores-5185575c.js';
import 'fs';

/* src\AppControls.svelte generated by Svelte v3.35.0 */
const file = "src\\AppControls.svelte";

function create_fragment(ctx) {
	let main;
	let h1;
	let t0;
	let t1;
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			main = element("main");
			h1 = element("h1");
			t0 = text(/*$start*/ ctx[0]);
			t1 = space();
			button = element("button");
			button.textContent = "Start";
			add_location(h1, file, 12, 4, 243);
			add_location(button, file, 13, 4, 266);
			add_location(main, file, 11, 0, 231);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, h1);
			append_dev(h1, t0);
			append_dev(main, t1);
			append_dev(main, button);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*startTimer*/ ctx[1], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$start*/ 1) set_data_dev(t0, /*$start*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $start;
	validate_store(start, "start");
	component_subscribe($$self, start, $$value => $$invalidate(0, $start = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("AppControls", slots, []);

	const startTimer = () => {
		start.set(Date.now());
		duration.set(10000);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AppControls> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ start, duration, startTimer, $start });
	return [$start, startTimer];
}

class AppControls extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AppControls",
			options,
			id: create_fragment.name
		});
	}
}

const appControls = new AppControls({
    target: document.body,
    props: {
        width: 200,
        height: 200,
    }
});

export default appControls;
//# sourceMappingURL=appControls.js.map
