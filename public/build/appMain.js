
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_store, c as circleAngle, a as component_subscribe, b as start, e as duration, f as validate_slots, r as remainingTime, g as svg_element, h as space, j as element, t as text, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as set_data_dev, p as noop, q as detach_dev, u as globals, w as create_component, x as mount_component, y as transition_in, z as transition_out, A as destroy_component } from './stores-5185575c.js';
import 'fs';

// from http://stackoverflow.com/a/18473154
const partialCircle = (cx, cy, r, start, end) => {
	const length = end - start;
	if (length === 0) return []

	const fromX = r * Math.cos(start) + cx;
	const fromY = r * Math.sin(start) + cy;
	const toX = r * Math.cos(end) + cx;
	const toY = r * Math.sin(end) + cy;
	const large = Math.abs(length) <= Math.PI ? '0' : '1';
	const sweep = length < 0 ? '0' : '1';

	return [
		['M', fromX, fromY],
		['A', r, r, 0, large, sweep, toX, toY]
	]
};

var svgPartialCircle = partialCircle;

/* src\Components\Timer.svelte generated by Svelte v3.35.0 */
const file$1 = "src\\Components\\Timer.svelte";

function create_fragment$1(ctx) {
	let svg;
	let path_1;
	let path_1_d_value;
	let t0;
	let h1;
	let t1;
	let t2;
	let h20;
	let t3;
	let t4;
	let h21;
	let t5;
	let t6;
	let button;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path_1 = svg_element("path");
			t0 = space();
			h1 = element("h1");
			t1 = text(/*$circleAngle*/ ctx[3]);
			t2 = space();
			h20 = element("h2");
			t3 = text(/*$start*/ ctx[5]);
			t4 = space();
			h21 = element("h2");
			t5 = text(/*$duration*/ ctx[6]);
			t6 = space();
			button = element("button");
			button.textContent = "START";
			attr_dev(path_1, "d", path_1_d_value = `${/*path*/ ctx[4]}`);
			attr_dev(path_1, "stroke-width", /*thickness*/ ctx[2]);
			attr_dev(path_1, "stroke", "rgb(0, 190, 255)");
			attr_dev(path_1, "fill", "transparent");
			add_location(path_1, file$1, 30, 4, 693);
			attr_dev(svg, "width", /*width*/ ctx[0]);
			attr_dev(svg, "height", /*height*/ ctx[1]);
			add_location(svg, file$1, 29, 0, 652);
			attr_dev(h1, "class", "svelte-14fkd7h");
			add_location(h1, file$1, 33, 0, 933);
			add_location(h20, file$1, 34, 0, 958);
			add_location(h21, file$1, 35, 0, 977);
			add_location(button, file$1, 36, 0, 999);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path_1);
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, h20, anchor);
			append_dev(h20, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, h21, anchor);
			append_dev(h21, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, button, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*path*/ 16 && path_1_d_value !== (path_1_d_value = `${/*path*/ ctx[4]}`)) {
				attr_dev(path_1, "d", path_1_d_value);
			}

			if (dirty & /*thickness*/ 4) {
				attr_dev(path_1, "stroke-width", /*thickness*/ ctx[2]);
			}

			if (dirty & /*width*/ 1) {
				attr_dev(svg, "width", /*width*/ ctx[0]);
			}

			if (dirty & /*height*/ 2) {
				attr_dev(svg, "height", /*height*/ ctx[1]);
			}

			if (dirty & /*$circleAngle*/ 8) set_data_dev(t1, /*$circleAngle*/ ctx[3]);
			if (dirty & /*$start*/ 32) set_data_dev(t3, /*$start*/ ctx[5]);
			if (dirty & /*$duration*/ 64) set_data_dev(t5, /*$duration*/ ctx[6]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(h20);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(h21);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let path;
	let $circleAngle;
	let $start;
	let $duration;
	validate_store(circleAngle, "circleAngle");
	component_subscribe($$self, circleAngle, $$value => $$invalidate(3, $circleAngle = $$value));
	validate_store(start, "start");
	component_subscribe($$self, start, $$value => $$invalidate(5, $start = $$value));
	validate_store(duration, "duration");
	component_subscribe($$self, duration, $$value => $$invalidate(6, $duration = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Timer", slots, []);
	let { width = 200 } = $$props;
	let { height = 200 } = $$props;
	let { thickness = 15 } = $$props;
	const π = Math.PI;
	const degToRad = deg => deg * π / 180;
	const convertAngle = deg => degToRad(deg - 90);
	const writable_props = ["width", "height", "thickness"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Timer> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("thickness" in $$props) $$invalidate(2, thickness = $$props.thickness);
	};

	$$self.$capture_state = () => ({
		partialCircle: svgPartialCircle,
		remainingTime,
		circleAngle,
		start,
		duration,
		width,
		height,
		thickness,
		π,
		degToRad,
		convertAngle,
		path,
		$circleAngle,
		$start,
		$duration
	});

	$$self.$inject_state = $$props => {
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("height" in $$props) $$invalidate(1, height = $$props.height);
		if ("thickness" in $$props) $$invalidate(2, thickness = $$props.thickness);
		if ("path" in $$props) $$invalidate(4, path = $$props.path);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*width, height, thickness, $circleAngle*/ 15) {
			$$invalidate(4, path = svgPartialCircle(width / 2, height / 2, width / 2 - thickness, convertAngle($circleAngle), convertAngle(0)).map(cmd => cmd.join(" ")).join(" "));
		}
	};

	return [width, height, thickness, $circleAngle, path, $start, $duration];
}

class Timer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { width: 0, height: 1, thickness: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Timer",
			options,
			id: create_fragment$1.name
		});
	}

	get width() {
		throw new Error("<Timer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Timer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Timer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Timer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get thickness() {
		throw new Error("<Timer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set thickness(value) {
		throw new Error("<Timer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\App.svelte generated by Svelte v3.35.0 */

const { Object: Object_1 } = globals;
const file = "src\\App.svelte";

function create_fragment(ctx) {
	let main;
	let div;
	let timer;
	let current;
	timer = new Timer({ $$inline: true });

	const block = {
		c: function create() {
			main = element("main");
			div = element("div");
			create_component(timer.$$.fragment);
			attr_dev(div, "class", "background svelte-14ien1");
			attr_dev(div, "style", /*cssVars*/ ctx[0]);
			add_location(div, file, 18, 1, 311);
			attr_dev(main, "class", "svelte-14ien1");
			add_location(main, file, 17, 0, 303);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div);
			mount_component(timer, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*cssVars*/ 1) {
				attr_dev(div, "style", /*cssVars*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(timer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(timer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(timer);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let cssVars;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("App", slots, []);
	let color = "orange";
	let { width } = $$props;
	let { height } = $$props;

	let styles = {
		"width": `${width}px`,
		"height": `${height}px`
	};

	const writable_props = ["width", "height"];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("height" in $$props) $$invalidate(2, height = $$props.height);
	};

	$$self.$capture_state = () => ({
		Timer,
		color,
		width,
		height,
		styles,
		cssVars
	});

	$$self.$inject_state = $$props => {
		if ("color" in $$props) color = $$props.color;
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("height" in $$props) $$invalidate(2, height = $$props.height);
		if ("styles" in $$props) $$invalidate(4, styles = $$props.styles);
		if ("cssVars" in $$props) $$invalidate(0, cssVars = $$props.cssVars);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$invalidate(0, cssVars = Object.entries(styles).map(([key, value]) => `--${key}:${value}`).join(";"));
	return [cssVars, width, height];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { width: 1, height: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*width*/ ctx[1] === undefined && !("width" in props)) {
			console.warn("<App> was created without expected prop 'width'");
		}

		if (/*height*/ ctx[2] === undefined && !("height" in props)) {
			console.warn("<App> was created without expected prop 'height'");
		}
	}

	get width() {
		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const app = new App({
	target: document.body,
	props: {
		width: 800,
		height: 600,
	}
});

export default app;
//# sourceMappingURL=appMain.js.map
